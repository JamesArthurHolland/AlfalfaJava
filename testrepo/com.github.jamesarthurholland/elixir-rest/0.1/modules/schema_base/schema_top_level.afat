{{ALFALFA -o schema.ex}}
defmodule ElixirRestWeb.Schema do
  use Absinthe.Schema

  alias ElixirRestWeb.Resolvers
  # import Types
  import_types(ElixirRestWeb.Schema.Types)

  query do
    {{ENTITIES}}
    {{VARS}}
    {{KEY}}@desc "Fetch a {{en_tity}} by primary key"{{/KEY}}
    {{KEY}}field :{{en_tity}}s, type: :{{en_tity}}_type do{{/KEY}}
    {{KEY}}  # Resolver{{/KEY}}
    {{KEY}}  resolve(&Resolvers.{{Entity}}Resolver.fetch/3){{/KEY}}
    {{KEY}}end{{/KEY}}
    {{/VARS}}

    {{INDICES}}
    @desc "Get {{en_tity}} by {{in_dex}}"
    field :{{en_tity}}, type: :{{en_tity}}_type do
      arg(:{{in_dex}}, non_null(:string))
      resolve(&Resolvers.{{Entity}}Resolver.fetch_by_{{in_dex}}/3)
    end

    {{/INDICES}}

    {{/ENTITIES}}


  end

  mutation do
    {{ENTITIES}}
    @desc "Create a new {{en_tity}}"
    field :create_{{en_tity}}, type: :{{en_tity}}_type do
      arg(:input, non_null(:{{en_tity}}_input_type))
      resolve(&Resolvers.{{Entity}}Resolver.create_{{en_tity}}/3)
    end

    {{/ENTITIES}}
  end


  #subscription do
  #end

end