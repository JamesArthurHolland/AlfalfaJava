{{ALFALFA -o {{en_tity}}_resolver.ex}}
defmodule ElixirRestWeb.Resolvers.{{Entity}}Resolver do
  alias ElixirRest.{{Entity}}

  def fetch(_, %{id: id}, _) do
    {{en_tity}} = {{Entity}}.fetch(id)
    case {{en_tity}} do
      nil -> {:error, nil}
      _   -> {:ok, {{en_tity}}}
    end
  end

  def create_{{en_tity}}(_, %{input: input}, _) do
    {{Entity}}.create_{{en_tity}}(input)
  end

  def update_{{en_tity}}(%{id: id, {{en_tity}}_attrs: {{en_tity}}_attrs}, _info) do
    {{Entity}}.fetch(id)
          |> {{Entity}}Entity.changeset({{en_tity}}_attrs)
          |> {{Entity}}.update_{{en_tity}}
  end

  {{INDICES}}
  def fetch_by_{{in_dex}}(_, %{{{in_dex}}: {{in_dex}}}, _) do
    {:ok, {{Entity}}.fetch_by_{{in_dex}}({{in_dex}})}
  end

  {{/INDICES}}
end