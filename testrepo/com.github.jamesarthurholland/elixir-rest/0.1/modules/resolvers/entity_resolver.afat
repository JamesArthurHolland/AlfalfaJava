{{ALFALFA -o {{en_tity}}_resolver.ex}}
defmodule ElixirRestWeb.Resolvers.{{Entity}}Resolver do
  alias ElixirRest.{{Entity}}

  def fetch(_, %{id: id}, _) do
    {{en_tity}} = {{Entity}}.fetch(id)
    case {{en_tity}} do
      nil -> {:error, nil}
      _   -> {:ok, {{en_tity}}}
  end

  def create_{{en_tity}}(_, %{input: input}, _) do
    {{Entity}}.create_{{en_tity}}(input)
  end

  def update(%{id: id, {{en_tity}}: update_users_data}_params, _info) do
    case fetch(%{id: id}, _info) do
     {:ok, {{en_tity}}} -> {{en_tity}} |> {{Entity}}.update_{{en_tity}}({{en_tity}}_params)
     {:error, _} -> {:error, "Failed to update {{en_tity}}"}
    end
  end

  {{INDICES}}
  def fetch_by_{{in_dex}}(_, %{{{in_dex}}: {{in_dex}}}, _) do
    {:ok, {{Entity}}.fetch_by_{{in_dex}}({{in_dex}})}
  end

  {{/INDICES}}
end