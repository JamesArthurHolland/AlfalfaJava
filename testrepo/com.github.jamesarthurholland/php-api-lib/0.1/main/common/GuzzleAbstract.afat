{{ALFALFA -o GuzzleAbstract.php}}
<?php
/**
 * Created by PhpStorm.
 * User: jamie
 * Date: 29/10/14
 * Time: 23:37
 */

namespace ASA\Common;

use ASA\Common\DiTrait;
use ASA\Common\StorageInterface;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

class GuzzleAbstract implements \Phalcon\DI\InjectionAwareInterface, StorageInterface
{
    use DiTrait;

    protected $client;
    protected $endpoint;
    protected $mapper;

    public function __construct($clientConfig, $endpoint, $mapper)
    {
        $this->setClient(new Client($clientConfig))
            ->setEndpoint($endpoint)
            ->setMapper($mapper);
    }

    public function fetch($id)
    {
        try{
            $response = $this->getClient()->get($this->getEndpoint() . '/' . $id);
            $entityArray = json_decode($response->getBody(), true);
            $entity = $this->getMapper()->fromArray($entityArray);

            return $entity;
        } catch(\Exception $e) {

        }


        return null;
    }

    public function fetchCollectionPaginationFilters($filter, $page = 1, $limit = 10)
    {
        $json = json_encode(['filter' => $filter->toArray(), 'page' => $page, 'limit' => $limit]);
//        echo "endpoint " . $this->getEndpoint();
//        if($this->getEndpoint() == "/role") {
//
//        var_dump($json);
//        die("die fetchCollectionPagFilters guzzleAbs");
//        }
        $response = $this->getClient()->post($this->getEndpoint() . '/filter', [
            'headers'   =>  ['content-type' => 'application/json'],
            'body'      =>  $json
        ]);

        $entityArray = json_decode($response->getBody(), true);

        $collection = [];

//        echo $json;
//        echo $this->getEndpoint();
//        var_dump($entityArray);
//        die();

        foreach($entityArray as $key => $value) {
            $collection[$key] = $this->getMapper()->fromArray($value);
        }

        return $collection;
    }

    public function save($entity)
    {
        $json = json_encode($entity);
//        echo "\n ===== \n";
//
//        echo "\n ===== \n";


        $response = $this->getClient()->post($this->getEndpoint(), [
            'headers'   =>  ['content-type' => 'application/json'],
            'body'      =>  $json
        ]);

        $entityArray = json_decode($response->getBody(), true);
        $entity = $this->getMapper()->fromArray($entityArray);

        return $entity;
    }

    public function getMapper()
    {
        return $this->mapper;
    }

    public function setMapper($mapper)
    {
        $this->mapper = $mapper;
        return $this;
    }

    public function getClient()
    {
        return $this->client;
    }

    public function setClient($client)
    {
//        $client->set($baseUrl);
        $this->client = $client;
        return $this;
    }

    public function getEndpoint()
    {
        return $this->endpoint;
    }

    public function setEndpoint($endpoint)
    {
        $this->endpoint = $endpoint;
        return $this;
    }
} 