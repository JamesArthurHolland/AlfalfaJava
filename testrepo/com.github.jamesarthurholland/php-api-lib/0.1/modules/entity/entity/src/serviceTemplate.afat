{{ALFALFA -o {{Entity}}Service.php}}
<?php

namespace {{NAMESPACE}}\{{Entity}};

class {{Entity}}Service
{

    public static function fetch($id) {
        $graphqlQueryName = '{{entity}}';
        $args = ['id' => 'id'];
        $vars = [
            new Variable('id', 'String', true)
        ];
        $varValues = ['id' => $id];

        $json = \App\GraphQLClient\Client::fetchByArgs(
            $graphqlQueryName,
            $vars,
            $args,
            $varValues
        );

        $mapper = new {{Entity}}Mapper();

        return $mapper->fromArray($json);
    }

    public static function save($entity) {
        if($entity->id == null) {
            return $this->create($entity);
        }
        return $this->update($entity);
    }

    public static function update($entity) {
        {{VARS}}
        {{KEY}}$id = $entity->{{var}};{{/KEY}}
        {{/VARS}}
        $mutation = (new Mutation('update{{Entity}}'))
            ->setVariables([new Variable('{{entity}}', '{{Entity}}InputObject', true)])
            ->setArguments(['id' => $id])
            ->setArguments(['{{entity}}InputObject' => '${{entity}}']);

        $variables = ['{{entity}}' => [
            {{VARS}}
            {{KEY}}{{var}} => $entity->{{var}},{{/KEY}}
            {{NOT-KEY NOT-LAST}}{{var}} => $entity->{{var}},{{/NOT-KEY}}
            {{NOT-KEY LAST}}{{var}} => $entity->{{var}}{{/NOT-KEY}}
            {{/VARS}}
        ]];
        $client->runQuery(
            $mutation,
            true,
            $variables
        );
    }

    public static function create($entity) {
        $mutation = (new Mutation('create{{Entity}}'))
            ->setVariables([new Variable('{{entity}}', '{{Entity}}InputObject', true)])
            ->setArguments(['{{entity}}InputObject' => '${{entity}}']);

        $variables = ['{{entity}}' => [
            {{VARS}}
            {{KEY}}{{var}} => $entity->{{var}},{{/KEY}}
            {{NOT-KEY NOT-LAST}}{{var}} => $entity->{{var}},{{/NOT-KEY}}
            {{NOT-KEY LAST}}{{var}} => $entity->{{var}}{{/NOT-KEY}}
            {{/VARS}}
        ]];
        $client->runQuery(
            $mutation,
            true,
            $variables
        );
    }

    {{MAPPINGS}}
    public static function fetchBy{{Index}}(${{index}}) {
        $graphqlQueryName = '{{entity}}By{{Index}}';
        $args = ['{{index}}' => '${{index}}'];
        $vars = [
            new Variable('{{index}}', 'String', true)
        ];
        $varValues = ['{{index}}' => {{index}}];

        $json = \App\GraphQLClient\Client::fetchByArgs(
            $graphqlQueryName,
            $vars,
            $args,
            $varValues
        );

        $mapper = new {{Entity}}Mapper();

        return $mapper->fromArray($json);
    }

    {{/MAPPINGS}}
}
